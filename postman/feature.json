{
	"info": {
		"_postman_id": "e80128e8-f3f5-4e00-a026-fe8f8250d35f",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36498887"
	},
	"item": [
		{
			"name": "Получение списка пользователей с наибольшим рейтингом",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        let users = [];\r",
							"        for (let i = 0; i < 5; i++) {\r",
							"            let user = await api.addUser(rnd.getUser());\r",
							"            users.push(user);\r",
							"        }\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        let events = [];\r",
							"        const eventCounts = [4, 3, 2];\r",
							"   \r",
							"        for (let i = 0; i < eventCounts.length; i++) {\r",
							"            const initiator = users[i];\r",
							"\r",
							"            for (let j = 0; j < eventCounts[i]; j++) {\r",
							"                let eventBody = rnd.getEvent(category.id);\r",
							"                eventBody['requestModeration'] = true;\r",
							"                let event = await api.addEvent(initiator.id, eventBody);\r",
							"                event = await api.publishEvent(event.id);\r",
							"\r",
							"                for (const user of users) {\r",
							"                    if (user.id !== initiator.id) {\r",
							"                        const requestToJoin = await api.publishParticipationRequest(event.id, user.id);\r",
							"                        await api.acceptParticipationRequest(event.id, initiator.id, requestToJoin.id);\r",
							"                        await api.privateEventRatingLike(event.id, user.id);\r",
							"                    }\r",
							"                }\r",
							"                events.push(event);\r",
							"            }\r",
							"        }\r",
							"    } catch (err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате JSON\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const users = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать массив пользователей\", function () {\r",
							"    pm.expect(users).to.be.an('array');\r",
							"    pm.expect(users.length).to.be.at.most(5);\r",
							"});\r",
							"\r",
							"pm.test(\"Пользователи должны быть отсортированы по убыванию рейтинга\", function () {\r",
							"    for (let i = 1; i < users.length; i++) {\r",
							"        pm.expect(users[i - 1].rating).to.be.at.least(users[i].rating);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Каждый пользователь должен содержать поля: id, name, rating\", function () {\r",
							"    users.forEach(user => {\r",
							"        pm.expect(user).to.have.property('id');\r",
							"        pm.expect(user).to.have.property('name');\r",
							"        pm.expect(user).to.have.property('rating');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/top?limit=5",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"top"
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						}
					]
				},
				"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
			},
			"response": []
		},
		{
			"name": "Получение списка событий с наибольшим рейтингом",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        let users = [];\r",
							"        for (let i = 0; i < 5; i++) {\r",
							"            let user = await api.addUser(rnd.getUser());\r",
							"            users.push(user);\r",
							"        }\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        let events = [];\r",
							"        const eventCounts = [4, 3, 2];\r",
							"    \r",
							"        for (let i = 0; i < eventCounts.length; i++) {\r",
							"            const initiator = users[i];\r",
							"\r",
							"            for (let j = 0; j < eventCounts[i]; j++) {\r",
							"                let eventBody = rnd.getEvent(category.id);\r",
							"                eventBody['requestModeration'] = true;\r",
							"                let event = await api.addEvent(initiator.id, eventBody);\r",
							"                event = await api.publishEvent(event.id);\r",
							"\r",
							"                for (const user of users) {\r",
							"                    if (user.id !== initiator.id) {\r",
							"                        const requestToJoin = await api.publishParticipationRequest(event.id, user.id);\r",
							"                        await api.acceptParticipationRequest(event.id, initiator.id, requestToJoin.id);\r",
							"                        await api.privateEventRatingLike(event.id, user.id);\r",
							"                    }\r",
							"                }\r",
							"                events.push(event);\r",
							"            }\r",
							"        }\r",
							"    } catch (err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате JSON\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const users = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать массив событий\", function () {\r",
							"    pm.expect(users).to.be.an('array');\r",
							"    pm.expect(users.length).to.be.at.most(10);\r",
							"});\r",
							"\r",
							"pm.test(\"Событии должны быть отсортированы по убыванию рейтинга\", function () {\r",
							"    for (let i = 1; i < users.length; i++) {\r",
							"        pm.expect(users[i - 1].rating).to.be.at.least(users[i].rating);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Каждое событие должено содержать поля: id, title, rating\", function () {\r",
							"    users.forEach(user => {\r",
							"        pm.expect(user).to.have.property('id');\r",
							"        pm.expect(user).to.have.property('title');\r",
							"        pm.expect(user).to.have.property('rating');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events/top?limit=10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"top"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						}
					]
				},
				"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
			},
			"response": []
		},
		{
			"name": "Получение списка событий с возможностью фильтрации, сортировка по рейтингу",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        let users = [];\r",
							"        for (let i = 0; i < 5; i++) {\r",
							"            let user = await api.addUser(rnd.getUser());\r",
							"            users.push(user);\r",
							"        }\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        const eventCounts = [4, 3, 2];\r",
							"    \r",
							"        for (let i = 0; i < eventCounts.length; i++) {\r",
							"            const initiator = users[i];\r",
							"\r",
							"            for (let j = 0; j < eventCounts[i]; j++) {\r",
							"                let eventBody = rnd.getEvent(category.id);\r",
							"                eventBody['requestModeration'] = true;\r",
							"                let event = await api.addEvent(initiator.id, eventBody);\r",
							"                event = await api.publishEvent(event.id);\r",
							"\r",
							"                for (const user of users) {\r",
							"                    if (user.id !== initiator.id) {\r",
							"                        const requestToJoin = await api.publishParticipationRequest(event.id, user.id);\r",
							"                        await api.acceptParticipationRequest(event.id, initiator.id, requestToJoin.id);\r",
							"                        await api.privateEventRatingLike(event.id, user.id);\r",
							"                    }\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"        \r",
							"        pm.request.removeQueryParams(['text', 'categories', 'sort']);\r",
							"        pm.request.addQueryParams([\r",
							"            `categories=${category.id}`,\r",
							"            `sort=RATING`\r",
							"        ]);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате JSON\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const events = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать массив событий\", function () {\r",
							"    pm.expect(events).to.be.an('array');\r",
							"    pm.expect(events.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"События должны быть отсортированы по убыванию рейтинга\", function () {\r",
							"    for (let i = 1; i < events.length; i++) {\r",
							"        pm.expect(events[i - 1].rating).to.be.at.least(events[i].rating);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Каждое событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration, rating\", function () {\r",
							"    events.forEach(event => {\r",
							"        pm.expect(event).to.have.property('id');\r",
							"        pm.expect(event).to.have.property('title');\r",
							"        pm.expect(event).to.have.property('annotation');\r",
							"        pm.expect(event).to.have.property('category');\r",
							"        pm.expect(event).to.have.property('paid');\r",
							"        pm.expect(event).to.have.property('eventDate');\r",
							"        pm.expect(event).to.have.property('initiator');\r",
							"        pm.expect(event).to.have.property('confirmedRequests');\r",
							"        pm.expect(event).to.have.property('views');\r",
							"        pm.expect(event).to.have.property('rating');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events?text=0&categories=0&paid=true&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&onlyAvailable=false&sort=EVENT_DATE&from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					],
					"query": [
						{
							"key": "text",
							"value": "0",
							"description": "текст для поиска в содержимом аннотации и подробном описании события"
						},
						{
							"key": "categories",
							"value": "0",
							"description": "список идентификаторов категорий в которых будет вестись поиск"
						},
						{
							"key": "paid",
							"value": "true",
							"description": "поиск только платных/бесплатных событий"
						},
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38",
							"description": "дата и время не раньше которых должно произойти событие"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38",
							"description": "дата и время не позже которых должно произойти событие"
						},
						{
							"key": "onlyAvailable",
							"value": "false",
							"description": "только события у которых не исчерпан лимит запросов на участие"
						},
						{
							"key": "sort",
							"value": "EVENT_DATE",
							"description": "Вариант сортировки: по дате события или по количеству просмотров"
						},
						{
							"key": "from",
							"value": "0",
							"description": "количество событий, которые нужно пропустить для формирования текущего набора"
						},
						{
							"key": "size",
							"value": "1000",
							"description": "количество событий в наборе"
						}
					]
				},
				"description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
			},
			"response": []
		},
		{
			"name": "Добавление like событию и автору события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let event;\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = true;\r",
							"        let event = await api.addEvent(initiator.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        const user = await api.addUser(rnd.getUser()); \r",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, user.id);\r",
							"\r",
							"        await api.acceptParticipationRequest(event.id, initiator.id, requestToJoin.id);\r",
							"        \r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/eventsRating/:eventId/like",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"eventsRating",
						":eventId",
						"like"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление dislike событию и автору события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let event;\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = true;\r",
							"        let event = await api.addEvent(initiator.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        const user = await api.addUser(rnd.getUser()); \r",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, user.id);\r",
							"\r",
							"        await api.acceptParticipationRequest(event.id, initiator.id, requestToJoin.id);\r",
							"        \r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/eventsRating/:eventId/dislike",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"eventsRating",
						":eventId",
						"dislike"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Проверка удаления like",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let event;\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = true;\r",
							"        let event = await api.addEvent(initiator.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        const user = await api.addUser(rnd.getUser()); \r",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, user.id);\r",
							"\r",
							"        await api.acceptParticipationRequest(event.id, initiator.id, requestToJoin.id);\r",
							"        \r",
							"        await api.privateEventRatingLike(event.id, user.id);\r",
							"\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/eventsRating/:eventId/delete",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"eventsRating",
						":eventId",
						"delete"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async privateEventRatingLike(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/eventsRating/' + eventId + '/like', null, \"Ошибка при добавлении like событию\", verbose);\r",
					"    }\r",
					"\r",
					"    async privateEventRatingDislike(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/eventsRating/' + eventId + '/dislike', null, \"Ошибка при добавлении dislike событию\", verbose);\r",
					"    }\r",
					"\r",
					"    async privateEventRatingDelete(eventId, userId, verbose=null) {\r",
					"        return this.sendRequest(\"DELETE\", '/users/' + userId + '/eventsRating/' + eventId + '/delete', null, \"Ошибка при удалении рейтинга события\", verbose);\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCompilation(compilation, verbose=null) {\r",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
					"    }\r",
					"\r",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCategory(catId, verbose=null) {\r",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCompilation(compId, verbose=null) {\r",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getCompilation(...eventIds) {\r",
					"        return {\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            events: eventIds\r",
					"        };\r",
					"    }\r",
					"\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": ""
		},
		{
			"key": "eid",
			"value": ""
		},
		{
			"key": "eventRatings",
			"value": ""
		}
	]
}